syntax = "proto3";

message Configuration {
    IOConfig ioConfig = 1;
    LogConfig logConfig = 2;
    AccelerometerConfig accelerometerConfig = 3;
    GyroscopeConfig gyroscopeConfig = 4;
    repeated MotorConfig motors = 5;
    repeated ServoConfig servos = 6;
    MixerConfig mixerConfig = 7;
    RCConfig rcConfig = 8;
    uint32 pidLoopFrequencyDivider = 9;
    repeated PidProfile pidProfiles = 10;
    uint32 selectedPidProfile = 11;
}

// Bus config
message IOConfig {
    repeated UartConfig uartConfigs = 1;
    repeated UartConfig softwareUartConfigs = 2;
    repeated I2CConfig i2cConfigs = 3;
    repeated SPIConfig spiConfigs = 4;
}

message UartConfig {
    string name = 1;
    Pin tx = 2;
    Pin rx = 3;
}

message I2CConfig {
    Pin sda = 1;
    Pin scl = 2;
    Speed speed = 3;

    enum Speed {
        _100kHz = 0;
        _400kHz = 1;
    }
}

message SPIConfig {
    Pin mosi = 1;
    Pin miso = 2;
    Pin sck = 3;
}

// Config options for Accelerometer
message AccelerometerConfig {
    oneof driverConfig {
        MpuI2cConfig mpuI2c = 1;
        MpuSpiConfig mpuSpi = 2;
    }
}

// Config options for Gyroscope
message GyroscopeConfig {
    oneof driverConfig {
        MpuI2cConfig mpuI2c = 1;
        MpuSpiConfig mpuSpi = 2;
    }
}

// Driver for MPU6000 / MPU9250 accelerometer and gyroscope over SPI
message MpuSpiConfig {
    uint32 busIndex = 1;
    Pin csPin = 2;
}

// Driver for MPU6000 / MPU6050 / MPU9250 accelerometer and gyroscope over I2C
message MpuI2cConfig {
    uint32 busIndex = 1;
    uint32 address = 2;
}

// Motor config
message MotorConfig {
    Pin outputPin = 1;
    MotorProtocol motorProtocol = 2;

    enum MotorProtocol {
        PWM = 0;
        DShot = 1;
    }
}

message ServoConfig {
    Pin outputPin = 1;
    ServoFrequency pwmFrequency = 2;

    enum ServoFrequency {
        _50Hz = 0;
        _330Hz = 1;
    }
}

message Pin {
    string pinName = 1;
}

message UartDescriptor {
    string name = 1;
}

message MixerConfig { // TODO mins/maxs
    repeated MixerRule mixerRules = 1;
}

message MixerRule {
    TargetType targetType = 1;
    uint32 targetIndex = 2;
    Source source = 3;
    // Range -1 to 1
    double weight = 4;

    enum TargetType {
        MOTOR = 0;
        SERVO = 1;
    }

    enum Source {
        THROTTLE = 0;
        PITCH = 1;
        ROLL = 2;
        YAW = 3;
    }
}

message RCConfig {
    oneof driverConfig {
        CrossfireConfig crossfire = 1;
        IBUSConfig ibus = 2;
        CC2500Config cc2500 = 3;
    }
}

message IBUSConfig {
    UartDescriptor uart = 1;
}

message CrossfireConfig {
    UartDescriptor uart = 1;
}

message LogConfig {
    UartDescriptor uart = 1;
    uint32 baudRate = 2;
    bool infoEnabled = 3;
    bool warningEnabled = 4;
    bool errorEnabled = 5;
}

message PidProfile {
    string name = 1;
    PidControllerConfig pitch = 2;
    PidControllerConfig roll = 3;
    PidControllerConfig yaw = 4;

    message PidControllerConfig {
        double Kp = 1;
        double Ki = 2;
        double Kd = 3;
        double Kff = 4;
    }
}

message CC2500Config {
    Protocol protocol = 1;
    uint32 spiBusIndex = 2;
    Pin csPin = 3;
    Pin interruptPin = 4;
    Pin bindPin = 5;
    Pin ledPin = 6;
    Pin transmitEnablePin = 7;
    Pin lnaEnablePin = 8;
    Pin antennaSelectionPin = 9;

    enum Protocol {
        FrSky = 0;
        Redpine = 1;
    }
}
