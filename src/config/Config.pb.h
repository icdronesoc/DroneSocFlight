/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_CONFIG_CONFIG_PB_H_INCLUDED
#define PB_CONFIG_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _I2CConfig_Speed {
    I2CConfig_Speed__100kHz = 0,
    I2CConfig_Speed__400kHz = 1
} I2CConfig_Speed;

typedef enum _MotorConfig_MotorProtocol {
    MotorConfig_MotorProtocol_PWM = 0,
    MotorConfig_MotorProtocol_DShot = 1
} MotorConfig_MotorProtocol;

typedef enum _ServoConfig_ServoFrequency {
    ServoConfig_ServoFrequency__50Hz = 0,
    ServoConfig_ServoFrequency__330Hz = 1
} ServoConfig_ServoFrequency;

typedef enum _MixerRule_TargetType {
    MixerRule_TargetType_MOTOR = 0,
    MixerRule_TargetType_SERVO = 1
} MixerRule_TargetType;

typedef enum _MixerRule_Source {
    MixerRule_Source_THROTTLE = 0,
    MixerRule_Source_PITCH = 1,
    MixerRule_Source_ROLL = 2,
    MixerRule_Source_YAW = 3
} MixerRule_Source;

typedef enum _CC2500Config_Protocol {
    CC2500Config_Protocol_FrSkyD8 = 0,
    CC2500Config_Protocol_FrskyD16 = 1,
    CC2500Config_Protocol_FrskyD16_LBT = 2,
    CC2500Config_Protocol_FrSkyL = 3,
    CC2500Config_Protocol_Redpine = 4
} CC2500Config_Protocol;

/* Struct definitions */
typedef struct _MixerRule {
    MixerRule_TargetType targetType;
    uint32_t targetIndex;
    MixerRule_Source source;
    double weight;
} MixerRule;

typedef struct _MpuI2cConfig {
    uint32_t busIndex;
    uint32_t address;
} MpuI2cConfig;

typedef struct _PidProfile_PidControllerConfig {
    double Kp;
    double Ki;
    double Kd;
    double Kff;
} PidProfile_PidControllerConfig;

typedef struct _Pin {
    char pinName[9];
} Pin;

typedef struct _UartDescriptor {
    char name[17];
} UartDescriptor;

typedef struct _CC2500Config {
    CC2500Config_Protocol protocol;
    uint32_t spiBusIndex;
    bool has_csPin;
    Pin csPin;
    bool has_interruptPin;
    Pin interruptPin;
    bool has_bindPin;
    Pin bindPin;
    bool has_ledPin;
    Pin ledPin;
    bool has_transmitEnablePin;
    Pin transmitEnablePin;
    bool has_lnaEnablePin;
    Pin lnaEnablePin;
    bool has_antennaSelectionPin;
    Pin antennaSelectionPin;
} CC2500Config;

typedef struct _CrossfireConfig {
    bool has_uart;
    UartDescriptor uart;
} CrossfireConfig;

typedef struct _I2CConfig {
    bool has_sda;
    Pin sda;
    bool has_scl;
    Pin scl;
    I2CConfig_Speed speed;
} I2CConfig;

typedef struct _IBUSConfig {
    bool has_uart;
    UartDescriptor uart;
} IBUSConfig;

typedef struct _LogConfig {
    bool has_uart;
    UartDescriptor uart;
    uint32_t baudRate;
    bool infoEnabled;
    bool warningEnabled;
    bool errorEnabled;
} LogConfig;

typedef struct _MixerConfig {
    pb_size_t mixerRules_count;
    MixerRule mixerRules[32];
} MixerConfig;

typedef struct _MotorConfig {
    bool has_outputPin;
    Pin outputPin;
    MotorConfig_MotorProtocol motorProtocol;
} MotorConfig;

typedef struct _MpuSpiConfig {
    uint32_t busIndex;
    bool has_csPin;
    Pin csPin;
} MpuSpiConfig;

typedef struct _PidProfile {
    pb_callback_t name;
    bool has_pitch;
    PidProfile_PidControllerConfig pitch;
    bool has_roll;
    PidProfile_PidControllerConfig roll;
    bool has_yaw;
    PidProfile_PidControllerConfig yaw;
} PidProfile;

typedef struct _SPIConfig {
    bool has_mosi;
    Pin mosi;
    bool has_miso;
    Pin miso;
    bool has_sck;
    Pin sck;
} SPIConfig;

typedef struct _ServoConfig {
    bool has_outputPin;
    Pin outputPin;
    ServoConfig_ServoFrequency pwmFrequency;
} ServoConfig;

typedef struct _UartConfig {
    char name[17];
    bool has_tx;
    Pin tx;
    bool has_rx;
    Pin rx;
} UartConfig;

typedef struct _AccelerometerConfig {
    pb_size_t which_driverConfig;
    union {
        MpuI2cConfig mpuI2c;
        MpuSpiConfig mpuSpi;
    } driverConfig;
} AccelerometerConfig;

typedef struct _GyroscopeConfig {
    pb_size_t which_driverConfig;
    union {
        MpuI2cConfig mpuI2c;
        MpuSpiConfig mpuSpi;
    } driverConfig;
} GyroscopeConfig;

typedef struct _IOConfig {
    pb_size_t uartConfigs_count;
    UartConfig uartConfigs[8];
    pb_size_t softwareUartConfigs_count;
    UartConfig softwareUartConfigs[2];
    pb_size_t i2cConfigs_count;
    I2CConfig i2cConfigs[3];
    pb_size_t spiConfigs_count;
    SPIConfig spiConfigs[3];
} IOConfig;

typedef struct _RCConfig {
    pb_size_t which_driverConfig;
    union {
        CrossfireConfig crossfire;
        IBUSConfig ibus;
        CC2500Config cc2500;
    } driverConfig;
} RCConfig;

typedef struct _Configuration {
    bool has_ioConfig;
    IOConfig ioConfig;
    bool has_logConfig;
    LogConfig logConfig;
    bool has_accelerometerConfig;
    AccelerometerConfig accelerometerConfig;
    bool has_gyroscopeConfig;
    GyroscopeConfig gyroscopeConfig;
    pb_size_t motors_count;
    MotorConfig motors[8];
    pb_size_t servos_count;
    ServoConfig servos[8];
    bool has_mixerConfig;
    MixerConfig mixerConfig;
    bool has_rcConfig;
    RCConfig rcConfig;
    uint32_t pidLoopFrequencyDivider;
    pb_size_t pidProfiles_count;
    PidProfile pidProfiles[3];
    uint32_t selectedPidProfile;
} Configuration;


/* Helper constants for enums */
#define _I2CConfig_Speed_MIN I2CConfig_Speed__100kHz
#define _I2CConfig_Speed_MAX I2CConfig_Speed__400kHz
#define _I2CConfig_Speed_ARRAYSIZE ((I2CConfig_Speed)(I2CConfig_Speed__400kHz+1))

#define _MotorConfig_MotorProtocol_MIN MotorConfig_MotorProtocol_PWM
#define _MotorConfig_MotorProtocol_MAX MotorConfig_MotorProtocol_DShot
#define _MotorConfig_MotorProtocol_ARRAYSIZE ((MotorConfig_MotorProtocol)(MotorConfig_MotorProtocol_DShot+1))

#define _ServoConfig_ServoFrequency_MIN ServoConfig_ServoFrequency__50Hz
#define _ServoConfig_ServoFrequency_MAX ServoConfig_ServoFrequency__330Hz
#define _ServoConfig_ServoFrequency_ARRAYSIZE ((ServoConfig_ServoFrequency)(ServoConfig_ServoFrequency__330Hz+1))

#define _MixerRule_TargetType_MIN MixerRule_TargetType_MOTOR
#define _MixerRule_TargetType_MAX MixerRule_TargetType_SERVO
#define _MixerRule_TargetType_ARRAYSIZE ((MixerRule_TargetType)(MixerRule_TargetType_SERVO+1))

#define _MixerRule_Source_MIN MixerRule_Source_THROTTLE
#define _MixerRule_Source_MAX MixerRule_Source_YAW
#define _MixerRule_Source_ARRAYSIZE ((MixerRule_Source)(MixerRule_Source_YAW+1))

#define _CC2500Config_Protocol_MIN CC2500Config_Protocol_FrSkyD8
#define _CC2500Config_Protocol_MAX CC2500Config_Protocol_Redpine
#define _CC2500Config_Protocol_ARRAYSIZE ((CC2500Config_Protocol)(CC2500Config_Protocol_Redpine+1))


/* Initializer values for message structs */
#define Configuration_init_default               {false, IOConfig_init_default, false, LogConfig_init_default, false, AccelerometerConfig_init_default, false, GyroscopeConfig_init_default, 0, {MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default, MotorConfig_init_default}, 0, {ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default, ServoConfig_init_default}, false, MixerConfig_init_default, false, RCConfig_init_default, 0, 0, {PidProfile_init_default, PidProfile_init_default, PidProfile_init_default}, 0}
#define IOConfig_init_default                    {0, {UartConfig_init_default, UartConfig_init_default, UartConfig_init_default, UartConfig_init_default, UartConfig_init_default, UartConfig_init_default, UartConfig_init_default, UartConfig_init_default}, 0, {UartConfig_init_default, UartConfig_init_default}, 0, {I2CConfig_init_default, I2CConfig_init_default, I2CConfig_init_default}, 0, {SPIConfig_init_default, SPIConfig_init_default, SPIConfig_init_default}}
#define UartConfig_init_default                  {"", false, Pin_init_default, false, Pin_init_default}
#define I2CConfig_init_default                   {false, Pin_init_default, false, Pin_init_default, _I2CConfig_Speed_MIN}
#define SPIConfig_init_default                   {false, Pin_init_default, false, Pin_init_default, false, Pin_init_default}
#define AccelerometerConfig_init_default         {0, {MpuI2cConfig_init_default}}
#define GyroscopeConfig_init_default             {0, {MpuI2cConfig_init_default}}
#define MpuSpiConfig_init_default                {0, false, Pin_init_default}
#define MpuI2cConfig_init_default                {0, 0}
#define MotorConfig_init_default                 {false, Pin_init_default, _MotorConfig_MotorProtocol_MIN}
#define ServoConfig_init_default                 {false, Pin_init_default, _ServoConfig_ServoFrequency_MIN}
#define Pin_init_default                         {""}
#define UartDescriptor_init_default              {""}
#define MixerConfig_init_default                 {0, {MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default, MixerRule_init_default}}
#define MixerRule_init_default                   {_MixerRule_TargetType_MIN, 0, _MixerRule_Source_MIN, 0}
#define RCConfig_init_default                    {0, {CrossfireConfig_init_default}}
#define IBUSConfig_init_default                  {false, UartDescriptor_init_default}
#define CrossfireConfig_init_default             {false, UartDescriptor_init_default}
#define LogConfig_init_default                   {false, UartDescriptor_init_default, 0, 0, 0, 0}
#define PidProfile_init_default                  {{{NULL}, NULL}, false, PidProfile_PidControllerConfig_init_default, false, PidProfile_PidControllerConfig_init_default, false, PidProfile_PidControllerConfig_init_default}
#define PidProfile_PidControllerConfig_init_default {0, 0, 0, 0}
#define CC2500Config_init_default                {_CC2500Config_Protocol_MIN, 0, false, Pin_init_default, false, Pin_init_default, false, Pin_init_default, false, Pin_init_default, false, Pin_init_default, false, Pin_init_default, false, Pin_init_default}
#define Configuration_init_zero                  {false, IOConfig_init_zero, false, LogConfig_init_zero, false, AccelerometerConfig_init_zero, false, GyroscopeConfig_init_zero, 0, {MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero, MotorConfig_init_zero}, 0, {ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero, ServoConfig_init_zero}, false, MixerConfig_init_zero, false, RCConfig_init_zero, 0, 0, {PidProfile_init_zero, PidProfile_init_zero, PidProfile_init_zero}, 0}
#define IOConfig_init_zero                       {0, {UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero, UartConfig_init_zero}, 0, {UartConfig_init_zero, UartConfig_init_zero}, 0, {I2CConfig_init_zero, I2CConfig_init_zero, I2CConfig_init_zero}, 0, {SPIConfig_init_zero, SPIConfig_init_zero, SPIConfig_init_zero}}
#define UartConfig_init_zero                     {"", false, Pin_init_zero, false, Pin_init_zero}
#define I2CConfig_init_zero                      {false, Pin_init_zero, false, Pin_init_zero, _I2CConfig_Speed_MIN}
#define SPIConfig_init_zero                      {false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero}
#define AccelerometerConfig_init_zero            {0, {MpuI2cConfig_init_zero}}
#define GyroscopeConfig_init_zero                {0, {MpuI2cConfig_init_zero}}
#define MpuSpiConfig_init_zero                   {0, false, Pin_init_zero}
#define MpuI2cConfig_init_zero                   {0, 0}
#define MotorConfig_init_zero                    {false, Pin_init_zero, _MotorConfig_MotorProtocol_MIN}
#define ServoConfig_init_zero                    {false, Pin_init_zero, _ServoConfig_ServoFrequency_MIN}
#define Pin_init_zero                            {""}
#define UartDescriptor_init_zero                 {""}
#define MixerConfig_init_zero                    {0, {MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero, MixerRule_init_zero}}
#define MixerRule_init_zero                      {_MixerRule_TargetType_MIN, 0, _MixerRule_Source_MIN, 0}
#define RCConfig_init_zero                       {0, {CrossfireConfig_init_zero}}
#define IBUSConfig_init_zero                     {false, UartDescriptor_init_zero}
#define CrossfireConfig_init_zero                {false, UartDescriptor_init_zero}
#define LogConfig_init_zero                      {false, UartDescriptor_init_zero, 0, 0, 0, 0}
#define PidProfile_init_zero                     {{{NULL}, NULL}, false, PidProfile_PidControllerConfig_init_zero, false, PidProfile_PidControllerConfig_init_zero, false, PidProfile_PidControllerConfig_init_zero}
#define PidProfile_PidControllerConfig_init_zero {0, 0, 0, 0}
#define CC2500Config_init_zero                   {_CC2500Config_Protocol_MIN, 0, false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero, false, Pin_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define MixerRule_targetType_tag                 1
#define MixerRule_targetIndex_tag                2
#define MixerRule_source_tag                     3
#define MixerRule_weight_tag                     4
#define MpuI2cConfig_busIndex_tag                1
#define MpuI2cConfig_address_tag                 2
#define PidProfile_PidControllerConfig_Kp_tag    1
#define PidProfile_PidControllerConfig_Ki_tag    2
#define PidProfile_PidControllerConfig_Kd_tag    3
#define PidProfile_PidControllerConfig_Kff_tag   4
#define Pin_pinName_tag                          1
#define UartDescriptor_name_tag                  1
#define CC2500Config_protocol_tag                1
#define CC2500Config_spiBusIndex_tag             2
#define CC2500Config_csPin_tag                   3
#define CC2500Config_interruptPin_tag            4
#define CC2500Config_bindPin_tag                 5
#define CC2500Config_ledPin_tag                  6
#define CC2500Config_transmitEnablePin_tag       7
#define CC2500Config_lnaEnablePin_tag            8
#define CC2500Config_antennaSelectionPin_tag     9
#define CrossfireConfig_uart_tag                 1
#define I2CConfig_sda_tag                        1
#define I2CConfig_scl_tag                        2
#define I2CConfig_speed_tag                      3
#define IBUSConfig_uart_tag                      1
#define LogConfig_uart_tag                       1
#define LogConfig_baudRate_tag                   2
#define LogConfig_infoEnabled_tag                3
#define LogConfig_warningEnabled_tag             4
#define LogConfig_errorEnabled_tag               5
#define MixerConfig_mixerRules_tag               1
#define MotorConfig_outputPin_tag                1
#define MotorConfig_motorProtocol_tag            2
#define MpuSpiConfig_busIndex_tag                1
#define MpuSpiConfig_csPin_tag                   2
#define PidProfile_name_tag                      1
#define PidProfile_pitch_tag                     2
#define PidProfile_roll_tag                      3
#define PidProfile_yaw_tag                       4
#define SPIConfig_mosi_tag                       1
#define SPIConfig_miso_tag                       2
#define SPIConfig_sck_tag                        3
#define ServoConfig_outputPin_tag                1
#define ServoConfig_pwmFrequency_tag             2
#define UartConfig_name_tag                      1
#define UartConfig_tx_tag                        2
#define UartConfig_rx_tag                        3
#define AccelerometerConfig_mpuI2c_tag           1
#define AccelerometerConfig_mpuSpi_tag           2
#define GyroscopeConfig_mpuI2c_tag               1
#define GyroscopeConfig_mpuSpi_tag               2
#define IOConfig_uartConfigs_tag                 1
#define IOConfig_softwareUartConfigs_tag         2
#define IOConfig_i2cConfigs_tag                  3
#define IOConfig_spiConfigs_tag                  4
#define RCConfig_crossfire_tag                   1
#define RCConfig_ibus_tag                        2
#define RCConfig_cc2500_tag                      3
#define Configuration_ioConfig_tag               1
#define Configuration_logConfig_tag              2
#define Configuration_accelerometerConfig_tag    3
#define Configuration_gyroscopeConfig_tag        4
#define Configuration_motors_tag                 5
#define Configuration_servos_tag                 6
#define Configuration_mixerConfig_tag            7
#define Configuration_rcConfig_tag               8
#define Configuration_pidLoopFrequencyDivider_tag 9
#define Configuration_pidProfiles_tag            10
#define Configuration_selectedPidProfile_tag     11

/* Struct field encoding specification for nanopb */
#define Configuration_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ioConfig,          1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  logConfig,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  accelerometerConfig,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gyroscopeConfig,   4) \
X(a, STATIC,   REPEATED, MESSAGE,  motors,            5) \
X(a, STATIC,   REPEATED, MESSAGE,  servos,            6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mixerConfig,       7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rcConfig,          8) \
X(a, STATIC,   SINGULAR, UINT32,   pidLoopFrequencyDivider,   9) \
X(a, STATIC,   REPEATED, MESSAGE,  pidProfiles,      10) \
X(a, STATIC,   SINGULAR, UINT32,   selectedPidProfile,  11)
#define Configuration_CALLBACK NULL
#define Configuration_DEFAULT NULL
#define Configuration_ioConfig_MSGTYPE IOConfig
#define Configuration_logConfig_MSGTYPE LogConfig
#define Configuration_accelerometerConfig_MSGTYPE AccelerometerConfig
#define Configuration_gyroscopeConfig_MSGTYPE GyroscopeConfig
#define Configuration_motors_MSGTYPE MotorConfig
#define Configuration_servos_MSGTYPE ServoConfig
#define Configuration_mixerConfig_MSGTYPE MixerConfig
#define Configuration_rcConfig_MSGTYPE RCConfig
#define Configuration_pidProfiles_MSGTYPE PidProfile

#define IOConfig_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  uartConfigs,       1) \
X(a, STATIC,   REPEATED, MESSAGE,  softwareUartConfigs,   2) \
X(a, STATIC,   REPEATED, MESSAGE,  i2cConfigs,        3) \
X(a, STATIC,   REPEATED, MESSAGE,  spiConfigs,        4)
#define IOConfig_CALLBACK NULL
#define IOConfig_DEFAULT NULL
#define IOConfig_uartConfigs_MSGTYPE UartConfig
#define IOConfig_softwareUartConfigs_MSGTYPE UartConfig
#define IOConfig_i2cConfigs_MSGTYPE I2CConfig
#define IOConfig_spiConfigs_MSGTYPE SPIConfig

#define UartConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tx,                2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rx,                3)
#define UartConfig_CALLBACK NULL
#define UartConfig_DEFAULT NULL
#define UartConfig_tx_MSGTYPE Pin
#define UartConfig_rx_MSGTYPE Pin

#define I2CConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sda,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  scl,               2) \
X(a, STATIC,   SINGULAR, UENUM,    speed,             3)
#define I2CConfig_CALLBACK NULL
#define I2CConfig_DEFAULT NULL
#define I2CConfig_sda_MSGTYPE Pin
#define I2CConfig_scl_MSGTYPE Pin

#define SPIConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mosi,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  miso,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sck,               3)
#define SPIConfig_CALLBACK NULL
#define SPIConfig_DEFAULT NULL
#define SPIConfig_mosi_MSGTYPE Pin
#define SPIConfig_miso_MSGTYPE Pin
#define SPIConfig_sck_MSGTYPE Pin

#define AccelerometerConfig_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,mpuI2c,driverConfig.mpuI2c),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,mpuSpi,driverConfig.mpuSpi),   2)
#define AccelerometerConfig_CALLBACK NULL
#define AccelerometerConfig_DEFAULT NULL
#define AccelerometerConfig_driverConfig_mpuI2c_MSGTYPE MpuI2cConfig
#define AccelerometerConfig_driverConfig_mpuSpi_MSGTYPE MpuSpiConfig

#define GyroscopeConfig_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,mpuI2c,driverConfig.mpuI2c),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,mpuSpi,driverConfig.mpuSpi),   2)
#define GyroscopeConfig_CALLBACK NULL
#define GyroscopeConfig_DEFAULT NULL
#define GyroscopeConfig_driverConfig_mpuI2c_MSGTYPE MpuI2cConfig
#define GyroscopeConfig_driverConfig_mpuSpi_MSGTYPE MpuSpiConfig

#define MpuSpiConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   busIndex,          1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  csPin,             2)
#define MpuSpiConfig_CALLBACK NULL
#define MpuSpiConfig_DEFAULT NULL
#define MpuSpiConfig_csPin_MSGTYPE Pin

#define MpuI2cConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   busIndex,          1) \
X(a, STATIC,   SINGULAR, UINT32,   address,           2)
#define MpuI2cConfig_CALLBACK NULL
#define MpuI2cConfig_DEFAULT NULL

#define MotorConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  outputPin,         1) \
X(a, STATIC,   SINGULAR, UENUM,    motorProtocol,     2)
#define MotorConfig_CALLBACK NULL
#define MotorConfig_DEFAULT NULL
#define MotorConfig_outputPin_MSGTYPE Pin

#define ServoConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  outputPin,         1) \
X(a, STATIC,   SINGULAR, UENUM,    pwmFrequency,      2)
#define ServoConfig_CALLBACK NULL
#define ServoConfig_DEFAULT NULL
#define ServoConfig_outputPin_MSGTYPE Pin

#define Pin_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pinName,           1)
#define Pin_CALLBACK NULL
#define Pin_DEFAULT NULL

#define UartDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   name,              1)
#define UartDescriptor_CALLBACK NULL
#define UartDescriptor_DEFAULT NULL

#define MixerConfig_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  mixerRules,        1)
#define MixerConfig_CALLBACK NULL
#define MixerConfig_DEFAULT NULL
#define MixerConfig_mixerRules_MSGTYPE MixerRule

#define MixerRule_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    targetType,        1) \
X(a, STATIC,   SINGULAR, UINT32,   targetIndex,       2) \
X(a, STATIC,   SINGULAR, UENUM,    source,            3) \
X(a, STATIC,   SINGULAR, DOUBLE,   weight,            4)
#define MixerRule_CALLBACK NULL
#define MixerRule_DEFAULT NULL

#define RCConfig_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,crossfire,driverConfig.crossfire),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,ibus,driverConfig.ibus),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (driverConfig,cc2500,driverConfig.cc2500),   3)
#define RCConfig_CALLBACK NULL
#define RCConfig_DEFAULT NULL
#define RCConfig_driverConfig_crossfire_MSGTYPE CrossfireConfig
#define RCConfig_driverConfig_ibus_MSGTYPE IBUSConfig
#define RCConfig_driverConfig_cc2500_MSGTYPE CC2500Config

#define IBUSConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  uart,              1)
#define IBUSConfig_CALLBACK NULL
#define IBUSConfig_DEFAULT NULL
#define IBUSConfig_uart_MSGTYPE UartDescriptor

#define CrossfireConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  uart,              1)
#define CrossfireConfig_CALLBACK NULL
#define CrossfireConfig_DEFAULT NULL
#define CrossfireConfig_uart_MSGTYPE UartDescriptor

#define LogConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  uart,              1) \
X(a, STATIC,   SINGULAR, UINT32,   baudRate,          2) \
X(a, STATIC,   SINGULAR, BOOL,     infoEnabled,       3) \
X(a, STATIC,   SINGULAR, BOOL,     warningEnabled,    4) \
X(a, STATIC,   SINGULAR, BOOL,     errorEnabled,      5)
#define LogConfig_CALLBACK NULL
#define LogConfig_DEFAULT NULL
#define LogConfig_uart_MSGTYPE UartDescriptor

#define PidProfile_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pitch,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  roll,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  yaw,               4)
#define PidProfile_CALLBACK pb_default_field_callback
#define PidProfile_DEFAULT NULL
#define PidProfile_pitch_MSGTYPE PidProfile_PidControllerConfig
#define PidProfile_roll_MSGTYPE PidProfile_PidControllerConfig
#define PidProfile_yaw_MSGTYPE PidProfile_PidControllerConfig

#define PidProfile_PidControllerConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   Kp,                1) \
X(a, STATIC,   SINGULAR, DOUBLE,   Ki,                2) \
X(a, STATIC,   SINGULAR, DOUBLE,   Kd,                3) \
X(a, STATIC,   SINGULAR, DOUBLE,   Kff,               4)
#define PidProfile_PidControllerConfig_CALLBACK NULL
#define PidProfile_PidControllerConfig_DEFAULT NULL

#define CC2500Config_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    protocol,          1) \
X(a, STATIC,   SINGULAR, UINT32,   spiBusIndex,       2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  csPin,             3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  interruptPin,      4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bindPin,           5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ledPin,            6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transmitEnablePin,   7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lnaEnablePin,      8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  antennaSelectionPin,   9)
#define CC2500Config_CALLBACK NULL
#define CC2500Config_DEFAULT NULL
#define CC2500Config_csPin_MSGTYPE Pin
#define CC2500Config_interruptPin_MSGTYPE Pin
#define CC2500Config_bindPin_MSGTYPE Pin
#define CC2500Config_ledPin_MSGTYPE Pin
#define CC2500Config_transmitEnablePin_MSGTYPE Pin
#define CC2500Config_lnaEnablePin_MSGTYPE Pin
#define CC2500Config_antennaSelectionPin_MSGTYPE Pin

extern const pb_msgdesc_t Configuration_msg;
extern const pb_msgdesc_t IOConfig_msg;
extern const pb_msgdesc_t UartConfig_msg;
extern const pb_msgdesc_t I2CConfig_msg;
extern const pb_msgdesc_t SPIConfig_msg;
extern const pb_msgdesc_t AccelerometerConfig_msg;
extern const pb_msgdesc_t GyroscopeConfig_msg;
extern const pb_msgdesc_t MpuSpiConfig_msg;
extern const pb_msgdesc_t MpuI2cConfig_msg;
extern const pb_msgdesc_t MotorConfig_msg;
extern const pb_msgdesc_t ServoConfig_msg;
extern const pb_msgdesc_t Pin_msg;
extern const pb_msgdesc_t UartDescriptor_msg;
extern const pb_msgdesc_t MixerConfig_msg;
extern const pb_msgdesc_t MixerRule_msg;
extern const pb_msgdesc_t RCConfig_msg;
extern const pb_msgdesc_t IBUSConfig_msg;
extern const pb_msgdesc_t CrossfireConfig_msg;
extern const pb_msgdesc_t LogConfig_msg;
extern const pb_msgdesc_t PidProfile_msg;
extern const pb_msgdesc_t PidProfile_PidControllerConfig_msg;
extern const pb_msgdesc_t CC2500Config_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Configuration_fields &Configuration_msg
#define IOConfig_fields &IOConfig_msg
#define UartConfig_fields &UartConfig_msg
#define I2CConfig_fields &I2CConfig_msg
#define SPIConfig_fields &SPIConfig_msg
#define AccelerometerConfig_fields &AccelerometerConfig_msg
#define GyroscopeConfig_fields &GyroscopeConfig_msg
#define MpuSpiConfig_fields &MpuSpiConfig_msg
#define MpuI2cConfig_fields &MpuI2cConfig_msg
#define MotorConfig_fields &MotorConfig_msg
#define ServoConfig_fields &ServoConfig_msg
#define Pin_fields &Pin_msg
#define UartDescriptor_fields &UartDescriptor_msg
#define MixerConfig_fields &MixerConfig_msg
#define MixerRule_fields &MixerRule_msg
#define RCConfig_fields &RCConfig_msg
#define IBUSConfig_fields &IBUSConfig_msg
#define CrossfireConfig_fields &CrossfireConfig_msg
#define LogConfig_fields &LogConfig_msg
#define PidProfile_fields &PidProfile_msg
#define PidProfile_PidControllerConfig_fields &PidProfile_PidControllerConfig_msg
#define CC2500Config_fields &CC2500Config_msg

/* Maximum encoded size of messages (where known) */
/* Configuration_size depends on runtime parameters */
#define IOConfig_size                            638
#define UartConfig_size                          42
#define I2CConfig_size                           26
#define SPIConfig_size                           36
#define AccelerometerConfig_size                 20
#define GyroscopeConfig_size                     20
#define MpuSpiConfig_size                        18
#define MpuI2cConfig_size                        12
#define MotorConfig_size                         14
#define ServoConfig_size                         14
#define Pin_size                                 10
#define UartDescriptor_size                      18
#define MixerConfig_size                         672
#define MixerRule_size                           19
#define RCConfig_size                            94
#define IBUSConfig_size                          20
#define CrossfireConfig_size                     20
#define LogConfig_size                           32
/* PidProfile_size depends on runtime parameters */
#define PidProfile_PidControllerConfig_size      36
#define CC2500Config_size                        92

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
